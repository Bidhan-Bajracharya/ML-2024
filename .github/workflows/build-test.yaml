name: AQI App CI

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Test the app using Docker
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build the Docker image for testing
      - name: Build Docker image for testing
        run: docker build -t aqi_prediction -f code/Dockerfile code

      # Run tests inside the Docker container
      - name: Run tests in Docker
        run: docker run aqi_prediction pytest

  build:
    runs-on: ubuntu-latest
    needs: test  # Build only after tests pass

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the Docker image for the app
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/aqi_prediction:latest -f code/Dockerfile code

      # Push the image to DockerHub
      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/aqi_prediction:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout the code (optional, if needed for your deployment files)
      - name: Checkout code
        uses: actions/checkout@v3

      # SSH into EC2 and deploy Docker container
      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}  # Set EC2 public IP or hostname in GitHub Secrets
          username: ${{ secrets.EC2_USERNAME }}  # Set EC2 username in GitHub Secrets (usually 'ec2-user' for Amazon Linux)
          key: ${{ secrets.SSH_PRIVATE_KEY }}  # Set private key in GitHub Secrets
          script: |
            # Pull the Docker image from Docker Hub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/aqi_prediction:latest

            # (Optional) If you are using Docker Compose, stop and remove old containers
            # cd /code  # Navigate to the directory where docker-compose.yml is located (if you use it)
            # docker compose down --remove-orphans

            # Run the Docker container directly if not using Docker Compose
            # docker run -d -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/aqi_prediction:latest

            # OR if using Docker Compose (adjust paths if needed)
            docker run -d -p 8050:8050 --name aqi_prediction_container ${{ secrets.DOCKERHUB_USERNAME }}/aqi_prediction:latest
